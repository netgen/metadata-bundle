<?php

namespace Netgen\MetadataBundle\Core\FieldType\Metadata;

use eZ\Publish\Core\Base\Exceptions\InvalidArgumentType;

use eZ\Publish\Core\FieldType\FieldType;
use eZ\Publish\Core\FieldType\Value as BaseValue;
use eZ\Publish\SPI\FieldType\Value as SPIValue;

use DOMDocument;

class Type extends FieldType
{
    /**
     * Returns the field type identifier for this field type
     *
     * This identifier should be globally unique and the implementer of a
     * FieldType must take care for the uniqueness. It is therefore recommended
     * to prefix the field-type identifier by a unique string that identifies
     * the implementer. A good identifier could for example take your companies main
     * domain name as a prefix in reverse order.
     *
     * @return string
     */
    public function getFieldTypeIdentifier()
    {
        return "xrowmetadata";
    }

    /**
     * Returns the empty value for this field type.
     *
     * This value will be used, if no value was provided for a field of this
     * type and no default value was specified in the field definition. It is
     * also used to determine that a user intentionally (or unintentionally) did not
     * set a non-empty value.
     *
     * @return \eZ\Publish\SPI\FieldType\Value
     */
    public function getEmptyValue()
    {
        return new Value();
    }

    /**
     * Converts an $hash to the Value defined by the field type
     *
     * This is the reverse operation to {@link toHash()}. At least the hash
     * format generated by {@link toHash()} must be converted in reverse.
     * Additional formats might be supported in the rare case that this is
     * necessary. See the class description for more details on a hash format.
     *
     * @param mixed $hash
     *
     * @throws \Exception
     *
     * @return \eZ\Publish\SPI\FieldType\Value
     */
    public function fromHash( $hash )
    {
        if ($hash === null)
        {
            return $this->getEmptyValue();
        }

        return new Value( $hash );

    }

    /**
     * Converts the given $value into a plain hash format
     *
     * Converts the given $value into a plain hash format, which can be used to
     * transfer the value through plain text formats, e.g. XML, which do not
     * support complex structures like objects. See the class level doc block
     * for additional information. See the class description for more details on a hash format.
     *
     * @param \eZ\Publish\SPI\FieldType\Value|\Netgen\MetadataBundle\Core\FieldType\Metadata\Value $value
     *
     * @return mixed
     */
    public function toHash( SPIValue $value )
    {
        return array( 'xml' => (string)$value->xml );
    }

    /**
     * Inspects given $inputValue and potentially converts it into a dedicated value object.
     *
     * If given $inputValue could not be converted or is already an instance of dedicate value object,
     * the method should simply return it.
     *
     * This is an operation method for {@see acceptValue()}.
     *
     * Example implementation:
     * <code>
     *  protected function createValueFromInput( $inputValue )
     *  {
     *      if ( is_array( $inputValue ) )
     *      {
     *          $inputValue = \eZ\Publish\Core\FieldType\CookieJar\Value( $inputValue );
     *      }
     *
     *      return $inputValue;
     *  }
     * </code>
     *
     * @param mixed $inputValue
     *
     * @return mixed The potentially converted input value.
     */
    protected function createValueFromInput( $inputValue )
    {
        if ( is_array( $inputValue ) && !empty( $inputValue ) )
        {
            $title = $inputValue['title'];
            $keywords = $inputValue['keywords'];
            $description = $inputValue['description'];
            if ( empty( $inputValue['priority'] ) )
            {
                $priority = null;
            }
            else
            {
                $priority = $inputValue['priority'];
            }
            if ( empty( $inputValue['change'] ) )
            {
                $change = 'daily';
            }
            else
            {
                $change = $inputValue['change'];
            }
            if ( $inputValue['sitemap_use'] === false )
            {
                $sitemap_use = '1';
            }
            elseif ( empty( $inputValue['sitemap_use'] ) )
            {
                $sitemap_use = '0';
            }
            else
            {
                $sitemap_use = '1';
            }

            $xml = new DOMDocument( "1.0", "UTF-8" );
            $xmldom = $xml->createElement( "MetaData" );
            $node = $xml->createElement( "title", htmlspecialchars( $title, ENT_QUOTES, 'UTF-8' ) );
            $xmldom->appendChild( $node );
            $node = $xml->createElement( "keywords", htmlspecialchars( implode(',', $keywords) , ENT_QUOTES, 'UTF-8' ) );
            $xmldom->appendChild( $node );
            $node = $xml->createElement( "description", htmlspecialchars( $description, ENT_QUOTES, 'UTF-8' ) );
            $xmldom->appendChild( $node );
            if (!empty( $priority ) )
            {
                $node = $xml->createElement( "priority", htmlspecialchars( $priority, ENT_QUOTES, 'UTF-8' ) );
            }
            else
            {
                $node = $xml->createElement( "priority" );
            }
            $xmldom->appendChild( $node );
            $node = $xml->createElement( "change", htmlspecialchars( $change, ENT_QUOTES, 'UTF-8' ) );
            $xmldom->appendChild( $node );
            $node = $xml->createElement( "sitemap_use", htmlspecialchars( $sitemap_use, ENT_QUOTES, 'UTF-8' ) );
            $xmldom->appendChild( $node );
            $xml->appendChild( $xmldom );

            return new Value( $xml );
        }

        if ( $inputValue === null )
        {
            return new Value();
        }

        return $inputValue;
    }

    /**
     * Throws an exception if value structure is not of expected format.
     *
     * @throws \eZ\Publish\API\Repository\Exceptions\InvalidArgumentException If the value does not match the expected structure.
     *
     * @param \Netgen\MetadataBundle\Core\FieldType\Metadata\Value $value
     *
     * @return void
     */
    protected function checkValueStructure( BaseValue $value )
    {
        if ( !$value->xml instanceof DomDocument )
        {
            throw new InvalidArgumentType(
                '$value->xml',
                'DomDocument',
                $value
            );
        }
    }


    /**
     * Returns a human readable string representation from the given $value
     *
     * It will be used to generate content name and url alias if current field
     * is designated to be used in the content name/urlAlias pattern.
     *
     * The used $value can be assumed to be already accepted by {@link
     * acceptValue()}.
     *
     * @param \eZ\Publish\SPI\FieldType\Value|\Netgen\MetadataBundle\Core\FieldType\Metadata\Value $value
     *
     * @return string
     */
    public function getName( SPIValue $value )
    {
        $result = null;
        if ( $metadata = $value->xml->documentElement->firstChild )
        {
            $textDom = $metadata->firstChild;

            if ( $textDom && $textDom->hasChildNodes() )
            {
                $result = $textDom->firstChild->textContent;
            }
            else if ( $textDom )
            {
                $result = $textDom->textContent;
            }
        }

        if ( $result === null )
            $result = $value->xml->documentElement->textContent;

        return trim( $result );
    }

    /**
    * Returns information for FieldValue->$sortKey relevant to the field type.
    *
    * Return value is mixed. It should be something which is sensible for
    * sorting.
    *
    * It is up to the persistence implementation to handle those values.
    * Common string and integer values are safe.
    *
    * For the legacy storage it is up to the field converters to set this
    * value in either sort_key_string or sort_key_int.
    *
    * @param \eZ\Publish\Core\FieldType\Value|\Netgen\MetadataBundle\Core\FieldType\Metadata\Value $value
    *
    * @return mixed
    */
    protected function getSortInfo( CoreValue $value )
    {
        return $this->getName( $value );
    }

    /**
     * @param \Netgen\MetadataBundle\Core\FieldType\Tweet\Value $value
     * @return \eZ\Publish\SPI\Persistence\Content\FieldValue
     */
    public function toPersistenceValue( SPIValue $value )
    {
        if ( $value === null )
        {
            return new PersistenceValue(
                array(
                    "data" => null,
                    "externalData" => null,
                    "sortKey" => null,
                )
            );
        }
        return new PersistenceValue(
            array(
                "data" => $this->toHash( $value ),
                "sortKey" => $this->getSortInfo( $value ),
            )
        );
    }
    /**
     * @param \eZ\Publish\SPI\Persistence\Content\FieldValue $fieldValue
     * @return \Netgen\MetadataBundle\Core\FieldType\Tweet\Value
     */
    public function fromPersistenceValue( PersistenceValue $fieldValue )
    {
        if ( $fieldValue->data === null )
        {
            return $this->getEmptyValue();
        }
        return new Value( $fieldValue->data );
    }
}
